// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//criar uma migration: npx prisma migrate dev
model User {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  role String @default("Owner")
  userStores UserStore[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("users")
}

model UserStore {
  id String @id @default(uuid())
  userId String
  storeId String
  user User @relation(fields: [userId], references: [id])
  store Store @relation(fields: [storeId], references: [id])

  @@unique([userId, storeId])
}

model Store {
  id String @id @default(uuid())
  name String
  adress String @unique
  userStores UserStore[]
  storeUsers StoreUser[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
  roles Role[] @relation("RoleStoreRelation")

  @@map("stores")
}

model StoreUser {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  role String
  store Store @relation(fields: [storeId], references: [id])
  storeId String
}

model Role {
  id String @id @default(uuid())
  name String
  storeId String
  permissions Permission[] @relation("RoleToPermission")
  store Store @relation(fields: [storeId], references: [id], name: "RoleStoreRelation")

  @@unique([name, storeId])
}

model Permission {
  id String @id @default(uuid())
  name String
  description String
  roles Role[] @relation("RoleToPermission")
}

model Category {
  id String @id @default(uuid())
  name String
  Product Product[]
  products Product[] @relation("Product.category")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

}

model Product {
  id String @id @default(uuid())
  banner String
  name String
  price String
  categoryId String
  category Category @relation(fields: [categoryId], references: [id])
  ProductQuantity ProductQuantity[]
  quantities ProductQuantity[] @relation("ProductQuantity.product")
  StockMoviment StockMoviment[]
  Category Category[] @relation("Product.category")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

}

model ProductQuantity {
  id String @id @default(uuid())
  product Product @relation(fields: [productId], references: [id])
  productId String
  quantity Int
  Product Product[] @relation("ProductQuantity.product")
  updatedAt DateTime? @default(now())
}

model StockMoviment {
  id String @id @default(uuid())
  product Product @relation(fields: [productId], references: [id])
  productId String
  type String
  quantity Int
  updatedAt DateTime? @default(now())
}
