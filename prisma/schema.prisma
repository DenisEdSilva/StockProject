// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//criar uma migration: npx prisma migrate dev
model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  role String @default("Owner")
  userStores UserStore[]
  stores Store[] @relation("UserStore")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("users")
  Store Store[]
}

model UserStore {
  id Int @id @default(autoincrement())
  userId Int
  storeId Int
  user User @relation(fields: [userId], references: [id])
  store Store @relation(fields: [storeId], references: [id])

  @@unique([userId, storeId])
}

model Store {
  id Int @id @default(autoincrement())
  name String
  adress String @unique
  ownerId Int
  owner User @relation(fields: [ownerId], references: [id])
  userStores UserStore[]
  storeUsers StoreUser[]
  categories Category[]
  products Product[]
  StockMoviment StockMoviment[]
  roles Role[] @relation("RoleStoreRelation")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
  User User[] @relation("UserStore")
  StockMovimentStore StockMovimentStore[]

  @@map("stores")
}

model StoreUser {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  role String
  storeId Int
  store Store @relation(fields: [storeId], references: [id])
}

model Role {
  id Int @id @default(autoincrement())
  name String
  storeId Int
  store Store @relation(fields: [storeId], references: [id], name: "RoleStoreRelation")
  permissions Permission[] @relation("RoleToPermission")

  @@unique([name, storeId])
}

model Permission {
  id Int @id @default(autoincrement())
  name String
  description String
  roles Role[] @relation("RoleToPermission")
}

model Category {
  id Int @id @default(autoincrement())
  name String
  storeId Int
  store Store @relation(fields: [storeId], references: [id])
  products Product[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
}

model Product {
  id Int @id @default(autoincrement())
  banner String
  name String
  stock Int @default(0)
  price String
  description String
  storeId Int
  categoryId Int
  store Store @relation(fields: [storeId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
  stockMoviment StockMoviment[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
}

model StockMoviment {
  id Int @id @default(autoincrement())
  productId Int
  stock Int @default(0)
  type String
  storeId Int
  product Product @relation(fields: [productId], references: [id])
  store Store @relation(fields: [storeId], references: [id])
  stockMovimentStore StockMovimentStore[]
  updatedAt DateTime? @default(now())
}

model StockMovimentStore{
  id Int @id @default(autoincrement())
  stockMovimentId Int
  stockMoviment StockMoviment @relation(fields: [stockMovimentId], references: [id])
  storeId Int
  store Store @relation(fields: [storeId], references: [id])
}